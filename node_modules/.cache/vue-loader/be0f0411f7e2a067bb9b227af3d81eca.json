{"remainingRequest":"/Users/viethai/Teespring/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/viethai/Teespring/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/viethai/Teespring/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/viethai/Teespring/src/view/Apparel/Apparel.vue?vue&type=template&id=f9a560dc&scoped=true&","dependencies":[{"path":"/Users/viethai/Teespring/src/view/Apparel/Apparel.vue","mtime":1603434796657},{"path":"/Users/viethai/Teespring/node_modules/cache-loader/dist/cjs.js","mtime":1598287468254},{"path":"/Users/viethai/Teespring/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1598287568178},{"path":"/Users/viethai/Teespring/node_modules/cache-loader/dist/cjs.js","mtime":1598287468254},{"path":"/Users/viethai/Teespring/node_modules/vue-loader/lib/index.js","mtime":1598287568178}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}